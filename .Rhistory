vocal_spatial_pair <- tibble(dist_vocal = dist_vocal,
dist_spatial = dist_spatial * 0.001)
similarity <- ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5) +
theme_bw() +
labs(x = "Distance between sites (km)",
y = "Vocal similarity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
similarity
ggsave(plot = similarity,
filename = here("docs", "figures", "similarity.png"),
height = 12,
width = 20,
units = "cm",
dpi = 300)
# import data
data_2021 <- read_csv(here("data", "processed", "2021_owl_BirdNET.csv")) %>%
filter(common_name == "Barred Owl")
library(tidyverse)
library(here)
# import data
data_2021 <- read_csv(here("data", "processed", "2021_owl_BirdNET.csv")) %>%
filter(common_name == "Barred Owl")
# import data
data_2021 <- read_csv(here("data", "processed", "2021_owl_BirdNET.csv")) %>%
filter(common_name == "Barred Owl")
data_2021
### Import data
owl_data <- read_csv("data/barred_owl_recordings_list_parameters_2.csv")
### Library
library(tidyverse)
library(here)
### Import data
owl_data <- read_csv(here("data", "data/barred_owl_recordings_list_parameters_2.csv"))
library(here)
here()
here()
library(here)
### Import data
owl_data <- read_csv(here("data", "data/barred_owl_recordings_list_parameters_2.csv"))
here()
### Library
library(tidyverse)
library(here)
### Import data
owl_data <- read_csv(here("data", "data/barred_owl_recordings_list_parameters_2.csv"))
### Library
library(tidyverse)
library(here)
### Import data
owl_data <- read_csv(here("data", "data/barred_owl_recordings_list_parameters_2.csv"))
here()
### Import data
owl_data <- read_csv(here("data", "barred_owl_recordings_list_parameters_2.csv"))
model
cm_p_1
View(data_transformed)
### Import data
data_owl <- data_clean_1
View(data_clean_1)
View(owl_data)
View(data_owl)
data_owl_vars <- data_owl %>%
select(3:32)
data_owl_vars %>% names()
?princomp
### PCA
pca <- princomp(data_owl_vars, cor = TRUE, scores = TRUE)
str(pca)
summary(pca, loadings = TRUE, cutoff = 0)
screeplot(pca)
brokenStick(1, 30)
?brokenStick
install.packages("PCDimension")
library(PCDimension)
brokenStick(1, 30)
brokenStick(2, 30)
brokenStick(3, 30)
brokenStick(4, 30)
variables_cor <- round(cor(pca$scores, Xscaled,),3) %>%
replace(., . <= 0.6, NA)
variables_cor[1:3, ]
# correlation between PCs and x variables
Xscaled <- scale(data_owl_vars, center = TRUE, scale = TRUE)
variables_cor <- round(cor(pca$scores, Xscaled,),3) %>%
replace(., . <= 0.6, NA)
variables_cor[1:3, ]
library(factoextra)
fviz_eig(pca)
p <- fviz_pca_ind(pca, repel = TRUE)
p
# visualization
fviz_pca_var(pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)     # Avoid text overlapping
data_owl
data_owl %>% names()
groups <- as.factor(data_owl$individual)
groups
fviz_pca_ind(pca,
col.ind = groups, # color by groups
palette = c("#00AFBB",  "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
legend.title = "Groups",
repel = TRUE
)
install.packages("ggsci")
library(ggsci)
col = pal_jco()(10)
fviz_pca_ind(pca,
col.ind = groups, # color by groups
palette = col,
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
legend.title = "Groups",
repel = TRUE
)
?fviz_pca_ind
fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = col,
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
legend.title = "Groups",
repel = TRUE
)
fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = pal_jco()(10),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
ellipse.level=0.95,
legend.title = "Groups",
repel = TRUE
)
fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = pal_jco()(10),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
ellipse.level=0.5,
legend.title = "Groups",
repel = TRUE
)
fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = pal_jco()(10),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
ellipse.level = 1.2,
legend.title = "Groups",
repel = TRUE
)
fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = pal_jco()(10),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
ellipse.level = 1,
legend.title = "Groups",
repel = TRUE
)
fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = pal_jco()(10),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
ellipse.level = 0.99,
legend.title = "Groups",
repel = TRUE
)
groups <- data_owl %>%
pull(individual) %>%
str_split(pattern = "_")
groups
?str_split
groups <- data_owl %>%
mutate(group = str_split_i(pattern = "_", 3)) %>%
pull(group)
groups <- data_owl %>%
mutate(group = str_split_i(individual, pattern = "_", n = 3)) %>%
pull(group)
groups <- data_owl %>%
mutate(group = str_split_i(individual, pattern = "_", i = 3)) %>%
pull(group)
groups <- data_owl %>%
mutate(group = str_split_i(individual, pattern = "_", i = 3)) %>%
pull(group) %>%
as.factor()
fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = pal_jco()(10),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
ellipse.level = 0.99,
legend.title = "site",
repel = TRUE
)
# visualization
pca_var <- fviz_pca_var(pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)     # Avoid text overlapping
pca_ind <- fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = pal_jco()(10),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
ellipse.level = 0.99,
legend.title = "site",
repel = TRUE
)
ggsave(filename = here("data", "figures", "review_PCA_var.png"),
plot = pca_var,
height = 6,
width = 6,
units = "cm",
dpi = 300)
pca_ind <- fviz_pca_ind(pca,
col.ind = groups, # color by groups
geom = "point",
palette = pal_jco()(10),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
ellipse.level = 0.99,
legend.title = "site",
repel = TRUE)
ggsave(filename = here("data", "figures", "review_PCA_ind.png"),
plot = pca_ind,
height = 6,
width = 6,
units = "cm",
dpi = 300)
ggsave(filename = here("docs", "figures", "review_PCA_var.png"),
plot = pca_var,
height = 6,
width = 6,
units = "cm",
dpi = 300)
ggsave(filename = here("docs", "figures", "review_PCA_ind.png"),
plot = pca_ind,
height = 6,
width = 6,
units = "cm",
dpi = 300)
ggsave(filename = here("docs", "figures", "review_PCA_var.png"),
plot = pca_var,
height = 15,
width = 15,
units = "cm",
dpi = 300)
ggsave(filename = here("docs", "figures", "review_PCA_ind.jpg"),
plot = pca_ind,
height = 15,
width = 15,
units = "cm",
dpi = 300)
ggsave(filename = here("docs", "figures", "review_PCA_var.jpg"),
plot = pca_var,
height = 15,
width = 15,
units = "cm",
dpi = 300)
Xscaled <- scale(data_owl_vars, center = TRUE, scale = TRUE)
variables_cor <- round(cor(pca$scores, Xscaled,),3) %>%
replace(., . <= 0.6, NA)
variables_cor[1:4, ]
model
summary(model)
str(model)
broom(model)
model$prior
model$means
model$scaling
model
model$prior
model$scaling
write_csv(here("docs", "tables", "LDA_table.csv"))
write_csv(model$scaling,here("docs", "tables", "LDA_table.csv"))
model_sca
model_scaling
model$scaling
model$scaling %>% class()
write_csv(model$scaling %>% as_tibble(), here("docs", "tables", "LDA_table.csv"))
model
knitr::opts_chunk$set(echo = TRUE)
vocal_spatial <- cbind(data_transformed, predict(model)$x) %>%
group_by(individual) %>%
summarize(LD1_mean = mean(LD1),
LD2_mean = mean(LD2)) %>%
mutate(individual = str_sub(individual, start = 6)) %>%
left_join(data_location_clean, by = c("individual" = "site"))
library(tidyverse)
vocal_spatial <- cbind(data_transformed, predict(model)$x) %>%
group_by(individual) %>%
summarize(LD1_mean = mean(LD1),
LD2_mean = mean(LD2)) %>%
mutate(individual = str_sub(individual, start = 6)) %>%
left_join(data_location_clean, by = c("individual" = "site"))
coordinates <- cbind(vocal_spatial$longitude, vocal_spatial$latitude)
sites_sp <- vect(coordinates, crs = "+proj=longlat +datum=WGS84")
library(terra)
vocal_spatial <- cbind(data_transformed, predict(model)$x) %>%
group_by(individual) %>%
summarize(LD1_mean = mean(LD1),
LD2_mean = mean(LD2)) %>%
mutate(individual = str_sub(individual, start = 6)) %>%
left_join(data_location_clean, by = c("individual" = "site"))
coordinates <- cbind(vocal_spatial$longitude, vocal_spatial$latitude)
sites_sp <- vect(coordinates, crs = "+proj=longlat +datum=WGS84")
dist_spatial <- vocal_spatial %>%
select(longitude, latitude) %>%
as.matrix() %>%
vect(crs = "+proj=longlat +datum=WGS84") %>%
terra::distance()
dist_vocal <- vocal_spatial %>%
select(LD1_mean, LD2_mean) %>%
dist(method = "euclidean")
vocal_spatial_pair <- tibble(dist_vocal = dist_vocal,
dist_spatial = dist_spatial * 0.001)
similarity <- ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5) +
theme_bw() +
labs(x = "Distance between sites (km)",
y = "Vocal similarity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
library(here)
library(tidyverse)
library(lubridate)
library(reshape2)
library(sf)
library(leaflet)
library(ggmap)
library(ggspatial)
library(ggord)
install.packages(:ggord)
install.packages("ggord")
library(here)
library(tidyverse)
library(lubridate)
library(reshape2)
library(sf)
library(leaflet)
library(ggmap)
library(ggspatial)
library(ggord)
library(factoextra)
library(ggbiplot)
library(corrplot)
library(psych)
library(caret)
library(MASS)
library(klaR)
library(heplots)
vocal_spatial <- cbind(data_transformed, predict(model)$x) %>%
group_by(individual) %>%
summarize(LD1_mean = mean(LD1),
LD2_mean = mean(LD2)) %>%
mutate(individual = str_sub(individual, start = 6)) %>%
left_join(data_location_clean, by = c("individual" = "site"))
coordinates <- cbind(vocal_spatial$longitude, vocal_spatial$latitude)
sites_sp <- vect(coordinates, crs = "+proj=longlat +datum=WGS84")
dist_spatial <- vocal_spatial %>%
select(longitude, latitude) %>%
as.matrix() %>%
vect(crs = "+proj=longlat +datum=WGS84") %>%
terra::distance()
dist_vocal <- vocal_spatial %>%
select(LD1_mean, LD2_mean) %>%
dist(method = "euclidean")
vocal_spatial_pair <- tibble(dist_vocal = dist_vocal,
dist_spatial = dist_spatial * 0.001)
similarity <- ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5) +
theme_bw() +
labs(x = "Distance between sites (km)",
y = "Vocal similarity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
options(repos = c(
fawda123 = 'https://fawda123.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# Install ggord
install.packages('ggord')
library(ggord)
vocal_spatial <- cbind(data_transformed, predict(model)$x) %>%
group_by(individual) %>%
summarize(LD1_mean = mean(LD1),
LD2_mean = mean(LD2)) %>%
mutate(individual = str_sub(individual, start = 6)) %>%
left_join(data_location_clean, by = c("individual" = "site"))
coordinates <- cbind(vocal_spatial$longitude, vocal_spatial$latitude)
sites_sp <- vect(coordinates, crs = "+proj=longlat +datum=WGS84")
dist_spatial <- vocal_spatial %>%
select(longitude, latitude) %>%
as.matrix() %>%
vect(crs = "+proj=longlat +datum=WGS84") %>%
terra::distance()
dist_vocal <- vocal_spatial %>%
select(LD1_mean, LD2_mean) %>%
dist(method = "euclidean")
vocal_spatial_pair <- tibble(dist_vocal = dist_vocal,
dist_spatial = dist_spatial * 0.001)
similarity <- ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5) +
theme_bw() +
labs(x = "Distance between sites (km)",
y = "Vocal similarity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
library(ggpubr)
similarity <- ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5) +
theme_bw() +
labs(x = "Distance between sites (km)",
y = "Vocal similarity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
similarity
?stat_cor()
similarity <- ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5,
cor.coef.name = "rho", digits = 1) +
theme_bw() +
labs(x = "Distance between sites (km)",
y = "Vocal similarity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
similarity
similarity <- ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5,
cor.coef.name = "rho", digits = 2) +
theme_bw() +
labs(x = "Distance between sites (km)",
y = "Vocal similarity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
similarity
?stat_cor()
similarity <- ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5,
cor.coef.name = "rho", p.digits = 1) +
theme_bw() +
labs(x = "Distance between sites (km)",
y = "Vocal similarity") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
similarity
ggsave(plot = similarity,
filename = here("docs", "figures", "similarity.png"),
height = 12,
width = 20,
units = "cm",
dpi = 300)
model
data_transformed
model
?lda()
model %>% str()
library(tidyverse)
model %>% str()
out.mda.f1 <- predict(model)
out.mda.f1
out.mda.f1 %>% head()
out.mda.f1 %>% head(3)
out.mda.f1$x %>% head()
cor.f1 <- round(cor(data_transformed[, -1], out.mda.f1$x[, 1:6]), digits = 2)
cor.f1
