theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
xlab("Distance between sites") +
ylab("Vocal similarity") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5) +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
ggplot(aes(x = dist_spatial, y = dist_vocal), data = vocal_spatial_pair) +
geom_point(shape = 18, size = 4, colour = "black") +
geom_smooth(method = "lm", colour = "black") +
xlab("Distance between sites") +
ylab("Vocal similarity") +
stat_cor(method = "pearson", label.x = 0.2, label.y = 8.5, size = 5) +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12))
acc_kappa_p
variables <- c("sl", "i2", "i3", "duration_8", "meandom_6",
"duration_3", "meandom_8", "duration_2", "meandom_5", "meandom_1")
data_transformed <- data_clean_1 %>%
preProcess(method = c("center", "scale")) %>%
predict(data_clean_1) %>%
select(all_of(c("individual", variables[1:6])))
model <- data_transformed %>%
lda(individual ~ ., data = .)
# lda_data <- cbind(data_transformed, predict(model)$x)
# ggplot(lda_data, aes(LD1, LD2)) +
#   geom_point(aes(color = individual))
ggord(model, data_clean_1$site, arrow = NULL, txt = NULL) +
coord_fixed(ratio = 0.7)
variables <- c("sl", "i2", "i3", "duration_8", "meandom_6",
"duration_3", "meandom_8", "duration_2", "meandom_5", "meandom_1")
data_transformed <- data_clean_1 %>%
preProcess(method = c("center", "scale")) %>%
predict(data_clean_1) %>%
select(all_of(c("individual", variables[1:6])))
model <- data_transformed %>%
lda(individual ~ ., data = .)
# lda_data <- cbind(data_transformed, predict(model)$x)
# ggplot(lda_data, aes(LD1, LD2)) +
#   geom_point(aes(color = individual))
ggord(model, data_clean_1$site, arrow = NULL, txt = NULL) +
coord_fixed(ratio = 0.7)
variables <- c("sl", "i2", "i3", "duration_8", "meandom_6",
"duration_3", "meandom_8", "duration_2", "meandom_5", "meandom_1")
data_transformed <- data_clean_1 %>%
preProcess(method = c("center", "scale")) %>%
predict(data_clean_1) %>%
select(all_of(c("individual", variables[1:6])))
model <- data_transformed %>%
lda(individual ~ ., data = .)
# lda_data <- cbind(data_transformed, predict(model)$x)
# ggplot(lda_data, aes(LD1, LD2)) +
#   geom_point(aes(color = individual))
ggord(model, data_clean_1$site, arrow = NULL, txt = NULL) +
coord_fixed(ratio = 0.7)
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
# colnames(df) <- c("x", "y", "value")
ggplot(df, aes(x = predicted, y = observed, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
# colnames(df) <- c("x", "y", "value")
ggplot(df, aes(x = predicted, y = observed, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
cm_p_6[[1]]$table
std <- function(x) sd(x)/sqrt(length(x))
acc_kappa_p <- bind_cols(cm_p_1[[2]], cm_p_2[[2]], cm_p_3[[2]], cm_p_4[[2]], cm_p_5[[2]],
cm_p_6[[2]], cm_p_7[[2]], cm_p_8[[2]], cm_p_9[[2]], cm_p_10[[2]],
cm_p_1[[3]], cm_p_2[[3]], cm_p_3[[3]], cm_p_4[[3]], cm_p_5[[3]],
cm_p_6[[3]], cm_p_7[[3]], cm_p_8[[3]], cm_p_9[[3]], cm_p_10[[3]]) %>%
rename(!!setNames(names(.), c(paste0("Accuracy_", seq(1:10)), paste0("Kappa Statistics_", seq(1:10))))) %>%
pivot_longer(everything(), names_to = "method", values_to = "value") %>%
separate(col = method, sep = "_", into = c("metrics", "n_variables")) %>%
mutate(n_variables = factor(n_variables, levels = unique(n_variables))) %>%
# ggplot(aes(x = n_variables, y = value)) +
# geom_boxplot() +
# geom_jitter(color = "steelblue",
#             size = 0.9,
#             position = position_jitter(width = 0.15),
#             alpha = 0.3) +
# facet_wrap(~metrics, nrow = 1) +
# theme_bw()
group_by(metrics, n_variables) %>%
summarize(mean_value = mean(value),
std_value = std(value)) %>%
ungroup() %>%
ggplot(aes(x = n_variables, y = mean_value,
colour = metrics, group = metrics)) +
#geom_point(size = 5, shape = 1) +
geom_ribbon(aes(ymin = mean_value - 1.96*std_value,
ymax = mean_value + 1.96*std_value),
alpha = 0.3, colour = NA) +
geom_line(size = 1.2) +
scale_colour_viridis_d() +
xlab("Number of variables") +
ylab("Value") +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 14),
legend.position = c(0.8, 0.2))
acc_kappa_p
acc_kappa_p
summarise <- dplyr::summarise()
here <- here::here
select <- dplyr::select
filter <- dplyr::filter
summarize <- dplyr::summarize
summarise <- dplyr::summarise
group_by <- dplyr::group_by
rename <- dplyr::rename
std <- function(x) sd(x)/sqrt(length(x))
acc_kappa_p <- bind_cols(cm_p_1[[2]], cm_p_2[[2]], cm_p_3[[2]], cm_p_4[[2]], cm_p_5[[2]],
cm_p_6[[2]], cm_p_7[[2]], cm_p_8[[2]], cm_p_9[[2]], cm_p_10[[2]],
cm_p_1[[3]], cm_p_2[[3]], cm_p_3[[3]], cm_p_4[[3]], cm_p_5[[3]],
cm_p_6[[3]], cm_p_7[[3]], cm_p_8[[3]], cm_p_9[[3]], cm_p_10[[3]]) %>%
rename(!!setNames(names(.), c(paste0("Accuracy_", seq(1:10)), paste0("Kappa Statistics_", seq(1:10))))) %>%
pivot_longer(everything(), names_to = "method", values_to = "value") %>%
separate(col = method, sep = "_", into = c("metrics", "n_variables")) %>%
mutate(n_variables = factor(n_variables, levels = unique(n_variables))) %>%
# ggplot(aes(x = n_variables, y = value)) +
# geom_boxplot() +
# geom_jitter(color = "steelblue",
#             size = 0.9,
#             position = position_jitter(width = 0.15),
#             alpha = 0.3) +
# facet_wrap(~metrics, nrow = 1) +
# theme_bw()
group_by(metrics, n_variables) %>%
summarize(mean_value = mean(value),
std_value = std(value)) %>%
ungroup() %>%
ggplot(aes(x = n_variables, y = mean_value,
colour = metrics, group = metrics)) +
#geom_point(size = 5, shape = 1) +
geom_ribbon(aes(ymin = mean_value - 1.96*std_value,
ymax = mean_value + 1.96*std_value),
alpha = 0.3, colour = NA) +
geom_line(size = 1.2) +
scale_colour_viridis_d() +
xlab("Number of variables") +
ylab("Value") +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 14),
legend.position = c(0.8, 0.2))
acc_kappa_p
acc_kappa_p
std <- function(x) sd(x)/sqrt(length(x))
acc_kappa_p <- bind_cols(cm_p_1[[2]], cm_p_2[[2]], cm_p_3[[2]], cm_p_4[[2]], cm_p_5[[2]],
cm_p_6[[2]], cm_p_7[[2]], cm_p_8[[2]], cm_p_9[[2]], cm_p_10[[2]],
cm_p_1[[3]], cm_p_2[[3]], cm_p_3[[3]], cm_p_4[[3]], cm_p_5[[3]],
cm_p_6[[3]], cm_p_7[[3]], cm_p_8[[3]], cm_p_9[[3]], cm_p_10[[3]]) %>%
rename(!!setNames(names(.), c(paste0("Accuracy_", seq(1:10)), paste0("Kappa Statistics_", seq(1:10))))) %>%
pivot_longer(everything(), names_to = "method", values_to = "value") %>%
separate(col = method, sep = "_", into = c("metrics", "n_variables")) %>%
mutate(n_variables = factor(n_variables, levels = unique(n_variables))) %>%
# ggplot(aes(x = n_variables, y = value)) +
# geom_boxplot() +
# geom_jitter(color = "steelblue",
#             size = 0.9,
#             position = position_jitter(width = 0.15),
#             alpha = 0.3) +
# facet_wrap(~metrics, nrow = 1) +
# theme_bw()
group_by(metrics, n_variables) %>%
summarize(mean_value = mean(value),
std_value = std(value)) %>%
ungroup() %>%
ggplot(aes(x = n_variables, y = mean_value,
colour = metrics, group = metrics)) +
#geom_point(size = 5, shape = 1) +
geom_ribbon(aes(ymin = mean_value - 1.96*std_value,
ymax = mean_value + 1.96*std_value),
alpha = 0.3) +
geom_line(size = 1.2) +
scale_colour_viridis_d() +
xlab("Number of variables") +
ylab("Value") +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 14),
legend.position = c(0.8, 0.2))
acc_kappa_p
acc_kappa_p
std <- function(x) sd(x)/sqrt(length(x))
acc_kappa_p <- bind_cols(cm_p_1[[2]], cm_p_2[[2]], cm_p_3[[2]], cm_p_4[[2]], cm_p_5[[2]],
cm_p_6[[2]], cm_p_7[[2]], cm_p_8[[2]], cm_p_9[[2]], cm_p_10[[2]],
cm_p_1[[3]], cm_p_2[[3]], cm_p_3[[3]], cm_p_4[[3]], cm_p_5[[3]],
cm_p_6[[3]], cm_p_7[[3]], cm_p_8[[3]], cm_p_9[[3]], cm_p_10[[3]]) %>%
rename(!!setNames(names(.), c(paste0("Accuracy_", seq(1:10)), paste0("Kappa Statistics_", seq(1:10))))) %>%
pivot_longer(everything(), names_to = "method", values_to = "value") %>%
separate(col = method, sep = "_", into = c("metrics", "n_variables")) %>%
mutate(n_variables = factor(n_variables, levels = unique(n_variables))) %>%
# ggplot(aes(x = n_variables, y = value)) +
# geom_boxplot() +
# geom_jitter(color = "steelblue",
#             size = 0.9,
#             position = position_jitter(width = 0.15),
#             alpha = 0.3) +
# facet_wrap(~metrics, nrow = 1) +
# theme_bw()
group_by(metrics, n_variables) %>%
summarize(mean_value = mean(value),
std_value = std(value)) %>%
ungroup() %>%
ggplot(aes(x = n_variables, y = mean_value,
colour = metrics, group = metrics)) +
#geom_point(size = 5, shape = 1) +
geom_ribbon(aes(ymin = mean_value - 1.96*std_value,
ymax = mean_value + 1.96*std_value),
alpha = 0.3, colour = NA) +
geom_line(size = 1.2) +
scale_colour_viridis_d() +
xlab("Number of variables") +
ylab("Value") +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 14),
legend.position = c(0.8, 0.2))
acc_kappa_p
acc_kappa_p <- bind_cols(cm_p_1[[2]], cm_p_2[[2]], cm_p_3[[2]], cm_p_4[[2]], cm_p_5[[2]],
cm_p_6[[2]], cm_p_7[[2]], cm_p_8[[2]], cm_p_9[[2]], cm_p_10[[2]],
cm_p_1[[3]], cm_p_2[[3]], cm_p_3[[3]], cm_p_4[[3]], cm_p_5[[3]],
cm_p_6[[3]], cm_p_7[[3]], cm_p_8[[3]], cm_p_9[[3]], cm_p_10[[3]]) %>%
rename(!!setNames(names(.), c(paste0("Accuracy_", seq(1:10)), paste0("Kappa Statistics_", seq(1:10))))) %>%
pivot_longer(everything(), names_to = "method", values_to = "value") %>%
separate(col = method, sep = "_", into = c("metrics", "n_variables")) %>%
mutate(n_variables = factor(n_variables, levels = unique(n_variables))) %>%
# ggplot(aes(x = n_variables, y = value)) +
# geom_boxplot() +
# geom_jitter(color = "steelblue",
#             size = 0.9,
#             position = position_jitter(width = 0.15),
#             alpha = 0.3) +
# facet_wrap(~metrics, nrow = 1) +
# theme_bw()
group_by(metrics, n_variables) %>%
summarize(mean_value = mean(value),
std_value = std(value)) %>%
ungroup()
acc_kappa_p
ggord(model, data_clean_1$site, arrow = NULL, txt = NULL) +
coord_fixed(ratio = 0.7)
ggord(model, data_clean_1$site, arrow = NULL, txt = NULL) +
coord_fixed(ratio = 0.7)
knitr::opts_chunk$set(echo = TRUE)
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
library(here)
library(tidyverse)
library(lubridate)
library(reshape2)
library(sf)
library(leaflet)
library(ggmap)
library(ggspatial)
library(ggord)
library(factoextra)
library(ggbiplot)
library(corrplot)
library(psych)
library(caret)
library(MASS)
library(klaR)
library(heplots)
here <- here::here
select <- dplyr::select
filter <- dplyr::filter
summarize <- dplyr::summarize
group_by <- dplyr::group_by
rename <- dplyr::rename
source(here("R", "Ch2_1_qualified_recording_list.R"))
source(here("R", "Ch2_2_move_recordings_to_folder.R"))
source(here("R", "Ch2_3_parameters_from_raventable.R"))
source(here("R", "Ch2_4_lda_n_fold_validation.R"))
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
# colnames(df) <- c("x", "y", "value")
ggplot(df, aes(x = predicted, y = observed, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
df <- melt(cm_p_6[[1]]$table)
df
cm_p_6[[1]]$table
cm_p_6[[1]]
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
# colnames(df) <- c("x", "y", "value")
ggplot(df, aes(x = predicted, y = observed, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "black", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
ggplot(df, aes(x = predicted, y = observed, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "black", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
# colnames(df) <- c("x", "y", "value")
ggplot(df, aes(x = observed, y = predicted, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "black", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
# colnames(df) <- c("x", "y", "value")
ggplot(df, aes(x = observed, y = predicted, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "black", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
# colnames(df) <- c("x", "y", "value")
ggplot(df, aes(x = observed, y = predicted, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "black", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
cm_p_6[[1]]
write_delim(cm_p_6[[1]], here("data", "final_model.txt"))
write_table(cm_p_6[[1]], here("data", "final_model.txt"))
write.table(cm_p_6[[1]], here("data", "final_model.txt"))
cm_p_6[[1]] %>% type()
cm_p_6[[1]] %>% class()
as.matrix(cm_p_6[[1]], what = "classes")
as.matrix(cm_p_6[[1]], what = "classes") %>% write_csv(., here("data", "final_model_statistics.csv"))
as.matrix(cm_p_6[[1]], what = "classes") %>% write_delim(., here("data", "final_model_statistics.csv"))
as.matrix(cm_p_6[[1]], what = "classes") %>% write.csv(., here("data", "final_model_statistics.csv"))
as.table(cm_p_6[[1]]) %>% write.csv(., here("data", "final_model_matrix.csv"))
model_statistics <- read_csv(here("data", "final_model_statistics.csv"))
model
model_statistics
cm_p_6[[1]]
df <- melt(cm_p_6[[1]]$table) %>%
mutate(value = round(value))
# colnames(df) <- c("x", "y", "value")
ggplot(df, aes(x = observed, y = predicted, fill = value  %>% log())) +
geom_tile(color = "gray90",
lwd = 1.5,
linetype = 1) +
scale_fill_gradient(low = "white", high = "black", na.value = "white") +
coord_fixed() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.1, hjust = 0.2))
exp(0)
exp(1)
exp(2)
exp(3)
exp(4)
exp(5)
model_statistics_plot <- model_statistics
model_statistics
model_statistics_plot <- model_statistics %>%
t()
model_statistics_plot
?t()
colnames(stat_plot_1) <- stat_plot_1[1, ]
model_statistics <- read_csv(here("data", "final_model_statistics.csv"))
stat_plot <- model_statistics %>%
t()
colnames(stat_plot) <- stat_plot[1, ]
stat_plot
model_statistics <- read_csv(here("data", "final_model_statistics.csv")) %>% t()
colnames(model_statistics) <- model_statistics[1, ]
stat_plot <- model_statistics
stat_plot
stat_plot <- model_statistics %>%
filter(row_number()!=1)
model_statistics <- read_csv(here("data", "final_model_statistics.csv")) %>% t()
colnames(model_statistics) <- model_statistics[1, ]
stat_plot <- model_statistics %>%
filter(row_number() != 1)
stat_plot <- model_statistics %>%
as_tibble() %>%
filter(row_number() != 1)
model_statistics <- read_csv(here("data", "final_model_statistics.csv")) %>% t()
colnames(model_statistics) <- model_statistics[1, ]
stat_plot <- model_statistics %>%
as_tibble() %>%
filter(row_number() != 1)
stat_plot
model_statistics <- read_csv(here("data", "final_model_statistics.csv"))
model_statistics
?pivot_wider
stat_plot <- model_statistics %>%
pivot_wider(names_from = `...1`)
stat_plot <- model_statistics %>%
pivot_wider(names_from = `...1`, values_from = `2021_14_01`)
stat_plot
stat_plot
stat_plot
model_statistics <- read_csv(here("data", "final_model_statistics.csv"))
stat_plot <- model_statistics %>%
pivot_wider(names_from = `...1`, values_from = `2021_14_01`)
stat_plot
stat_plot <- model_statistics %>%
pivot_wider(names_from = `...1`, values_from = `2021_14_01`:`2021_14_27`)
stat_plot
stat_plot <- model_statistics %>%
pivot_wider(cols = !`...1`, names_to = site, values_to = value)
stat_plot <- model_statistics %>%
pivot_wider(cols = !`...1`, names_to = site, values_to = value)
stat_plot <- model_statistics %>%
pivot_wider(cols = !`...1`, names_to = "site", values_to = "value")
stat_plot <- model_statistics %>%
pivot_wider(cols = !...1, names_to = "site", values_to = "value")
model_statistics
model_statistics
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value")
stat_plot
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename(`...1` = "metrics")
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename("metrics" = `...1`)
stat_plot
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename("metrics" = `...1`) %>%
filter(metrics %in% c("Sensitivity", "Specificity"))
stat_plot
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename("metrics" = `...1`) %>%
filter(metrics %in% c("Sensitivity", "Specificity")) %>%
ggplot(aes(x = site, y = value, fill = metrics)) +
geom_bar(stat = "identity", position = "dodge")
model_statistics <- read_csv(here("data", "final_model_statistics.csv"))
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename("metrics" = `...1`) %>%
filter(metrics %in% c("Sensitivity", "Specificity")) %>%
ggplot(aes(x = site, y = value, fill = metrics)) +
geom_bar(stat = "identity", position = "dodge")
stat_plot
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename("metrics" = `...1`) %>%
filter(metrics %in% c("Sensitivity", "Specificity")) %>%
ggplot(aes(x = site, y = value, fill = metrics)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("aquamarine4", "darkolivegreen1"))
stat_plot
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename("metrics" = `...1`) %>%
filter(metrics %in% c("Sensitivity", "Specificity")) %>%
ggplot(aes(x = site, y = value, fill = metrics)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("aquamarine4", "darkolivegreen3"))
stat_plot
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename("metrics" = `...1`) %>%
filter(metrics %in% c("Sensitivity", "Specificity")) %>%
ggplot(aes(x = site, y = value, fill = metrics)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("aquamarine4", "darkolivegreen3")) +
theme_bw()
stat_plot
stat_plot
model_statistics
stat_plot <- model_statistics %>%
pivot_longer(cols = !...1, names_to = "site", values_to = "value") %>%
rename("metrics" = `...1`) %>%
filter(metrics %in% c("Sensitivity", "Specificity"))
stat_plot
stat_plot
